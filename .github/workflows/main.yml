name: CI
on:
  push:
    branches: 
      - '*/*'
  pull_request:
    branches: 
      - '*/*' 
  workflow_dispatch:
jobs:
  build: 
    runs-on: ubuntu-latest
    environment: AWS_AMPLIFY
    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.6.0
      - name: Use Node.js 18.12
        uses: actions/setup-node@v4
        with:
          node-version: 18.12.0
          cache: 'pnpm'
      - name: Install dependencies using pnpm (resolving lockfile and deps)
        run: pnpm install --no-frozen-lockfile
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Serverless Framework Login
        uses: serverless/github-action@v3.2
        with:
          run: |
            serverless login
            serverless config credentials --provider aws --key ${{ secrets.SERVERLESS_ACCESS_KEY }}
            npx serverless deploy

      - name: Check and Create Amplify App
        run: |
          APP_NAME="cosyal"
          APP_ID=$(aws amplify list-apps --query "apps[?name=='$APP_NAME'].appId" --output text)
          if [ -z "$APP_ID" ]; then
            echo "Creating Amplify app named $APP_NAME"
            APP_ID=$(aws amplify create-app --name $APP_NAME --query 'app.appId' --output text)
          else
            echo "Using existing Amplify app named $APP_NAME"
          fi
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV

      - name: Get Deployment URL from AWS Amplify
        run: |
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          DEPLOYMENT_URL=$(aws amplify list-branches --app-id ${{ env.APP_ID }} --query "branches[?branchName=='$BRANCH_NAME'].{url:defaultDomain}" --output text)
          echo "Deployment URL: $DEPLOYMENT_URL"
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> $GITHUB_ENV

      - name: Share Deployment URL
        run: echo "The deployment URL is ${{ env.DEPLOYMENT_URL }}"